{"version":3,"sources":["components/ShoppingList.js","containers/ShoppingListContainer.js","components/ListForm.js","components/ShoppingApp.js","App.js","reportWebVitals.js","index.js"],"names":["ShoppingList","shoppingList","name","list","useState","checked","setChecked","handleCheck","event","aux","target","className","map","item","type","onChange","length","defaultProps","ShoppingListContainer","ListForm","value","setValue","ShoppingApp","Row","Col","xs","App","Container","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAYMA,EAAe,SAAC,GAAkB,IAelBC,EAfCC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KAAU,EACPC,mBAAS,GADF,mBAC9BC,EAD8B,KACrBC,EADqB,KAG/BC,EAAc,SAACC,GACnB,IAAIC,EAAMJ,EAENG,EAAME,OAAOL,QACfI,GAAO,EAEPA,GAAO,EAGTH,EAAWG,IAcb,OACE,sBAAKE,UAAU,gBAAf,UACE,oDAAuBT,KACvB,+BAdgBD,EAeFE,EAdTF,EAAaW,KAAI,SAACC,GACvB,OACE,gCACE,uBAAOC,KAAK,WAAiCC,SAAUR,GAAvD,UAA+BM,EAA/B,WACA,sCAA+BA,EAA/B,gBAAeA,EAAf,aAFQA,SAeZ,oDAAuBR,EAAvB,IAAiCF,EAAKa,OAAtC,WAMNhB,EAAaiB,aA3CQ,GA6CNjB,QCzCTkB,EAAwB,SAAC,GAAY,IAAXhB,EAAU,EAAVA,KAQ9B,OACE,cAAC,EAAD,CAAcA,KAAMA,EAAMC,KARV,CAChB,OACA,OACA,QACA,WASJe,EAAsBD,aAlBD,GAoBNC,QChBTC,EAAW,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAKxB,OACE,+BACE,+CAEE,uBAAOP,KAAK,OAAOZ,KAAK,qBAAqBkB,MAAOA,EAAOL,SAR5C,SAACP,GACpBa,EAASb,EAAME,OAAOU,gBAc1BD,EAASF,aApBY,GAsBNE,QCVAG,EAfK,WAAO,IAAD,EACElB,mBAAS,IADX,mBACjBgB,EADiB,KACVC,EADU,KAGxB,OACE,eAACE,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAT,SACE,cAAC,EAAD,CAAUJ,SAAUA,EAAUD,MAAOA,MAEvC,cAACI,EAAA,EAAD,CAAKC,GAAI,EAAT,SACE,cAAC,EAAD,CAAuBvB,KAAMkB,UCEtBM,MAVf,WACE,OACE,cAACC,EAAA,EAAD,CAAWC,OAAK,EAACjB,UAAU,MAA3B,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCEOkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2ef37bae.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  name: PropTypes.string.isRequired,\n  list: PropTypes.arrayOf(PropTypes.string).isRequired\n}\n\nconst defaultProps = {\n\n}\n\nconst ShoppingList = ({name, list}) => {\n  const [checked, setChecked] = useState(0);\n\n  const handleCheck = (event) => {\n    let aux = checked;\n\n    if (event.target.checked) {\n      aux += 1;\n    } else {\n      aux -= 1;\n    }\n\n    setChecked(aux);\n  }\n\n  const renderList = (shoppingList) => {\n    return shoppingList.map((item) => {\n      return (\n        <div key={item}>\n          <input type=\"checkbox\" key={`${item}-input`} onChange={handleCheck} />\n          <label key={`${item}-label`}> {item} </label>\n        </div>\n      );\n    });\n  }\n\n  return (\n    <div className=\"shopping-list\">\n      <h1>Shopping List for {name}</h1>\n      <div>\n        {renderList(list)}\n      </div>\n\n      <span> Items in cart: {checked}/{list.length} </span>\n    </div>\n  )\n}\n\nShoppingList.propTypes = propTypes;\nShoppingList.defaultProps = defaultProps;\n\nexport default ShoppingList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ShoppingList from \"../components/ShoppingList\";\n\nconst propTypes = {\n  name: PropTypes.string.isRequired\n}\n\nconst defaultProps = {\n\n}\n\nconst ShoppingListContainer = ({name}) => {\n  const item_list = [\n    'Milk',\n    'Eggs',\n    'Bacon',\n    'Soda'\n  ]\n\n  return (\n    <ShoppingList name={name} list={item_list} />\n  )\n}\n\nShoppingListContainer.propTypes = propTypes;\nShoppingListContainer.defaultProps = defaultProps;\n\nexport default ShoppingListContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  value: PropTypes.string.isRequired,\n  setValue: PropTypes.func.isRequired\n}\n\nconst defaultProps = {\n\n}\n\nconst ListForm = ({value, setValue}) => {\n  const handleChange = (event) => {\n    setValue(event.target.value)\n  }\n\n  return (\n    <form>\n      <label>\n        Your name:\n        <input type=\"text\" name=\"shopping-list-form\" value={value} onChange={handleChange}/>\n      </label>\n    </form>\n  )\n}\n\nListForm.propTypes = propTypes;\nListForm.defaultProps = defaultProps;\n\nexport default ListForm;\n","import React, {useState} from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport ShoppingListContainer from '../containers/ShoppingListContainer';\nimport ListForm from './ListForm';\n\nconst ShoppingApp = () => {\n  const [value, setValue] = useState('');\n\n  return(\n    <Row>\n      <Col xs={6}>\n        <ListForm setValue={setValue} value={value}/>\n      </Col>\n      <Col xs={6}>\n        <ShoppingListContainer name={value}/>\n      </Col>\n    </Row>\n  );\n}\n\nexport default ShoppingApp;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container } from 'react-bootstrap';\nimport './App.scss';\nimport ShoppingApp from './components/ShoppingApp';\n\nfunction App() {\n  return (\n    <Container fluid className=\"App\">\n      <header className=\"App-header\">\n        <ShoppingApp />\n      </header>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}